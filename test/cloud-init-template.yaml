#cloud-config
# K8s Multi-Distribution Test - Universal Cloud-Init Template

users:
  - name: {{LOGIN_USER}}
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    lock_passwd: true

# Update system packages (only in online mode, packages already bundled for offline)
package_update: true
packages:
  - curl
  - wget
  - sudo

# Network configuration to ensure connectivity for online mode
network:
  version: 2
  ethernets:
    ens3:
      dhcp4: true
      dhcp6: false

# Write files
write_files:
  # setup-k8s.sh script (base64 decoded)
  - path: /tmp/setup-k8s.sh
    content: {{SETUP_K8S_CONTENT}}
    encoding: base64
    permissions: '0755'
    
  # cleanup-k8s.sh script (base64 decoded)
  - path: /tmp/cleanup-k8s.sh
    content: {{CLEANUP_K8S_CONTENT}}
    encoding: base64
    permissions: '0755'
    
  # Test execution wrapper script
  - path: /tmp/test-runner.sh
    content: |
      #!/bin/bash
      
      # Test start marker (output to serial console)
      echo "=== K8S_TEST_START:$(date -Iseconds) ===" > /dev/console
      
      # Detect test mode
      TEST_MODE="{{TEST_MODE}}"
      echo "Test mode: $TEST_MODE" > /dev/console
      
      # Phase 1: Execute setup-k8s.sh
      echo "Starting Kubernetes setup (master node)..." > /dev/console
      
      if [ "$TEST_MODE" = "online" ]; then
          echo "Running in online mode - downloading from GitHub..." > /dev/console
          
          # First check network connectivity
          echo "Checking network connectivity to GitHub..." > /dev/console
          if ! curl -fsSL --connect-timeout 10 --max-time 30 https://raw.github.com/MuNeNICK/setup-k8s/main/README.md > /dev/null 2>&1; then
              echo "ERROR: Cannot connect to GitHub. Network connectivity check failed." > /dev/console
              echo "ERROR: Cannot connect to GitHub" > /tmp/setup-k8s.log
              SETUP_EXIT_CODE=1
          else
              echo "Network connectivity to GitHub confirmed" > /dev/console
              
              # Download the script first to check if it's successful
              echo "Downloading setup-k8s.sh from GitHub..." > /dev/console
              if curl -fsSL --connect-timeout 10 --max-time 60 \
                     https://raw.github.com/MuNeNICK/setup-k8s/main/setup-k8s.sh \
                     -o /tmp/setup-k8s-online.sh 2>/tmp/curl-error.log; then
                  
                  # Check if file was actually downloaded and not empty
                  if [ -s /tmp/setup-k8s-online.sh ]; then
                      echo "Script downloaded successfully ($(wc -l < /tmp/setup-k8s-online.sh) lines)" > /dev/console
                      chmod +x /tmp/setup-k8s-online.sh
                      
                      # Execute the downloaded script
                      echo "Executing downloaded script..." > /dev/console
                      /tmp/setup-k8s-online.sh --node-type master {{K8S_VERSION_ARG}} {{SETUP_EXTRA_ARGS}} > /tmp/setup-k8s.log 2>&1
                      SETUP_EXIT_CODE=$?
                  else
                      echo "ERROR: Downloaded script is empty" > /dev/console
                      echo "ERROR: Downloaded script is empty" > /tmp/setup-k8s.log
                      SETUP_EXIT_CODE=1
                  fi
              else
                  echo "ERROR: Failed to download script from GitHub" > /dev/console
                  echo "Curl error output:" > /dev/console
                  cat /tmp/curl-error.log > /dev/console 2>/dev/null || true
                  echo "ERROR: Failed to download script from GitHub" > /tmp/setup-k8s.log
                  cat /tmp/curl-error.log >> /tmp/setup-k8s.log 2>/dev/null || true
                  SETUP_EXIT_CODE=1
              fi
          fi
      else
          echo "Running in offline mode - using bundled script..." > /dev/console
          # Use the bundled script for offline mode
          /tmp/setup-k8s.sh --node-type master {{K8S_VERSION_ARG}} {{SETUP_EXTRA_ARGS}} > /tmp/setup-k8s.log 2>&1
          SETUP_EXIT_CODE=$?
      fi
      
      echo "Setup completed with exit code: $SETUP_EXIT_CODE" > /dev/console
      
      # Output log on error
      if [ $SETUP_EXIT_CODE -ne 0 ]; then
        echo "=== SETUP ERROR LOG ===" > /dev/console
        cat /tmp/setup-k8s.log > /dev/console 2>/dev/null || true
        echo "=== SETUP ERROR LOG END ===" > /dev/console
      fi
      
      # Detailed operation verification
      echo "Verifying Kubernetes components..." > /dev/console
      
      # Check kubelet status
      if systemctl is-active --quiet kubelet; then
        KUBELET_STATUS="active"
        echo "kubelet is active" > /dev/console
      else
        KUBELET_STATUS="inactive"
        echo "kubelet is not active" > /dev/console
        systemctl status kubelet > /tmp/kubelet-status.log 2>&1 || true
      fi
      
      # Check kubeconfig existence
      if [ -f /etc/kubernetes/admin.conf ]; then
        KUBECONFIG_EXISTS="true"
        echo "kubeconfig exists" > /dev/console
      else
        KUBECONFIG_EXISTS="false"
        echo "kubeconfig does not exist" > /dev/console
      fi
      
      # Check API server response
      echo "Testing API server connectivity..." > /dev/console
      if timeout 30 kubectl get nodes --kubeconfig=/etc/kubernetes/admin.conf >/dev/null 2>&1; then
        API_RESPONSIVE="true"
        echo "API server is responsive" > /dev/console
      else
        API_RESPONSIVE="false"
        echo "API server is not responsive" > /dev/console
        # Save API test log
        kubectl get nodes --kubeconfig=/etc/kubernetes/admin.conf > /tmp/api-test.log 2>&1 || true
      fi
      
      # Save setup test results
      SETUP_TEST_STATUS="failed"
      if [ "$SETUP_EXIT_CODE" -eq 0 ] && [ "$KUBELET_STATUS" = "active" ] && [ "$API_RESPONSIVE" = "true" ]; then
        SETUP_TEST_STATUS="success"
        echo "Setup test: SUCCESS" > /dev/console
      else
        echo "Setup test: FAILED" > /dev/console
      fi
      
      # Phase 2: Execute cleanup-k8s.sh (only if setup succeeded)
      echo "Starting Kubernetes cleanup..." > /dev/console
      CLEANUP_EXIT_CODE=0
      CLEANUP_TEST_STATUS="skipped"
      PACKAGES_REMOVED="unknown"
      CONFIG_CLEANED="unknown"
      SERVICES_STOPPED="unknown"
      
      if [ "$SETUP_TEST_STATUS" = "success" ]; then
        # Run cleanup with force flag
        if [ "$TEST_MODE" = "online" ]; then
            echo "Running cleanup in online mode - downloading from GitHub..." > /dev/console
            
            # Download the cleanup script first
            echo "Downloading cleanup-k8s.sh from GitHub..." > /dev/console
            if curl -fsSL --connect-timeout 10 --max-time 60 \
                   https://raw.github.com/MuNeNICK/setup-k8s/main/cleanup-k8s.sh \
                   -o /tmp/cleanup-k8s-online.sh 2>/tmp/curl-cleanup-error.log; then
                
                # Check if file was actually downloaded and not empty
                if [ -s /tmp/cleanup-k8s-online.sh ]; then
                    echo "Cleanup script downloaded successfully ($(wc -l < /tmp/cleanup-k8s-online.sh) lines)" > /dev/console
                    chmod +x /tmp/cleanup-k8s-online.sh
                    
                    # Execute the downloaded script
                    echo "Executing downloaded cleanup script..." > /dev/console
                    /tmp/cleanup-k8s-online.sh --force > /tmp/cleanup-k8s.log 2>&1
                    CLEANUP_EXIT_CODE=$?
                else
                    echo "ERROR: Downloaded cleanup script is empty" > /dev/console
                    echo "ERROR: Downloaded cleanup script is empty" > /tmp/cleanup-k8s.log
                    CLEANUP_EXIT_CODE=1
                fi
            else
                echo "ERROR: Failed to download cleanup script from GitHub" > /dev/console
                echo "Curl error output:" > /dev/console
                cat /tmp/curl-cleanup-error.log > /dev/console 2>/dev/null || true
                echo "ERROR: Failed to download cleanup script from GitHub" > /tmp/cleanup-k8s.log
                cat /tmp/curl-cleanup-error.log >> /tmp/cleanup-k8s.log 2>/dev/null || true
                CLEANUP_EXIT_CODE=1
            fi
        else
            echo "Running cleanup in offline mode - using bundled script..." > /dev/console
            # Use the bundled cleanup script for offline mode
            /tmp/cleanup-k8s.sh --force > /tmp/cleanup-k8s.log 2>&1
            CLEANUP_EXIT_CODE=$?
        fi
        echo "Cleanup completed with exit code: $CLEANUP_EXIT_CODE" > /dev/console
        
        # Verify cleanup results
        echo "Verifying cleanup..." > /dev/console
        
        # Check if kubelet service is stopped and disabled
        KUBELET_ACTIVE=$(systemctl is-active kubelet 2>/dev/null || echo "inactive")
        KUBELET_ENABLED=$(systemctl is-enabled kubelet 2>/dev/null || echo "disabled")
        
        if [ "$KUBELET_ACTIVE" = "active" ]; then
          SERVICES_STOPPED="false"
          echo "ERROR: kubelet is still active after cleanup" > /dev/console
        elif [ "$KUBELET_ENABLED" = "enabled" ]; then
          SERVICES_STOPPED="false"
          echo "ERROR: kubelet is still enabled after cleanup" > /dev/console
        else
          SERVICES_STOPPED="true"
          echo "Services properly stopped and disabled" > /dev/console
        fi
        
        # Check if Kubernetes config files are removed
        if [ -d "/etc/kubernetes" ] && [ "$(ls -A /etc/kubernetes 2>/dev/null)" ]; then
          CONFIG_CLEANED="false"
          echo "ERROR: /etc/kubernetes still exists with files" > /dev/console
        elif [ -f "/etc/default/kubelet" ]; then
          CONFIG_CLEANED="false"
          echo "ERROR: /etc/default/kubelet still exists" > /dev/console
        else
          CONFIG_CLEANED="true"
          echo "Configuration files properly cleaned" > /dev/console
        fi
        
        # Check if Kubernetes packages are removed
        # This check varies by distribution, so we'll do a generic check
        PACKAGES_REMOVED="true"
        for cmd in kubeadm kubectl kubelet; do
          if command -v $cmd &>/dev/null; then
            PACKAGES_REMOVED="false"
            echo "ERROR: $cmd command still exists" > /dev/console
            break
          fi
        done
        
        if [ "$PACKAGES_REMOVED" = "true" ]; then
          echo "Kubernetes packages properly removed" > /dev/console
        fi
        
        # Determine cleanup test status
        if [ "$CLEANUP_EXIT_CODE" -eq 0 ] && \
           [ "$SERVICES_STOPPED" = "true" ] && \
           [ "$CONFIG_CLEANED" = "true" ] && \
           [ "$PACKAGES_REMOVED" = "true" ]; then
          CLEANUP_TEST_STATUS="success"
          echo "Cleanup test: SUCCESS" > /dev/console
        else
          CLEANUP_TEST_STATUS="failed"
          echo "Cleanup test: FAILED" > /dev/console
        fi
      else
        echo "Skipping cleanup test due to setup failure" > /dev/console
      fi
      
      # Final overall status
      if [ "$SETUP_TEST_STATUS" = "success" ] && [ "$CLEANUP_TEST_STATUS" = "success" ]; then
        FINAL_STATUS="success"
      else
        FINAL_STATUS="failed"
      fi
      
      # Output test result in JSON format to serial console
      # run-test.sh will parse this output
      echo "=== K8S_TEST_RESULT_JSON_START ===" > /dev/console
      echo "{" > /dev/console
      echo "  \"status\": \"$FINAL_STATUS\"," > /dev/console
      echo "  \"setup_test\": {" > /dev/console
      echo "    \"status\": \"$SETUP_TEST_STATUS\"," > /dev/console
      echo "    \"exit_code\": $SETUP_EXIT_CODE," > /dev/console
      echo "    \"kubelet_status\": \"$KUBELET_STATUS\"," > /dev/console
      echo "    \"kubeconfig_exists\": $KUBECONFIG_EXISTS," > /dev/console
      echo "    \"api_responsive\": $API_RESPONSIVE" > /dev/console
      echo "  }," > /dev/console
      echo "  \"cleanup_test\": {" > /dev/console
      echo "    \"status\": \"$CLEANUP_TEST_STATUS\"," > /dev/console
      echo "    \"exit_code\": $CLEANUP_EXIT_CODE," > /dev/console
      echo "    \"services_stopped\": \"$SERVICES_STOPPED\"," > /dev/console
      echo "    \"config_cleaned\": \"$CONFIG_CLEANED\"," > /dev/console
      echo "    \"packages_removed\": \"$PACKAGES_REMOVED\"" > /dev/console
      echo "  }," > /dev/console
      echo "  \"timestamp\": \"$(date -Iseconds)\"" > /dev/console
      echo "}" > /dev/console
      echo "=== K8S_TEST_RESULT_JSON_END ===" > /dev/console
      
      # Also output detailed logs to serial console
      echo "=== SETUP_LOG_START ===" > /dev/console
      cat /tmp/setup-k8s.log > /dev/console 2>/dev/null || echo "No setup log available" > /dev/console
      echo "=== SETUP_LOG_END ===" > /dev/console
      
      if [ "$CLEANUP_TEST_STATUS" != "skipped" ]; then
        echo "=== CLEANUP_LOG_START ===" > /dev/console
        cat /tmp/cleanup-k8s.log > /dev/console 2>/dev/null || echo "No cleanup log available" > /dev/console
        echo "=== CLEANUP_LOG_END ===" > /dev/console
      fi
      
      # Test completion marker
      echo "=== K8S_TEST_COMPLETED:$(date -Iseconds) ===" > /dev/console
      
      # System shutdown
      echo "Test completed, shutting down VM..." > /dev/console
      shutdown -h now
    permissions: '0755'

# Execute test after cloud-init completion
runcmd:
  - /tmp/test-runner.sh

# cloud-init completion message
final_message: "K8s test cloud-init completed"